" Plugins with Vundle {{{

set nocompatible              " be iMproved, keep vim enhancements required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/.vim/plugin')
"
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'

" Launch vim and run :PluginInstall

Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'vim-syntastic/syntastic'
Plugin 'fortes/vim-escuro'
Plugin 'mattn/emmet-vim'

" Plugin 'ternjs/tern_for_vim'
" Plugin 'Valloric/YouCompleteMe'

Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'

" All of your Plugins must be added before the following line

call vundle#end()            " required

" to install Launch vim and run :PluginInstall

filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
" filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Nerdtree Config {{{

map <C-n> :NERDTreeToggle<CR>"
let NERDRemoveExtraSpaces=1
let NERDSpaceDelims=1
map <Leader>n :NERDTreeToggle<CR>
map <leader>/ <plug>NERDCommenterToggle<CR>
imap <leader>/ <Esc><plug>NERDCommenterToggle<CR>

" }}}

" Emmit autocomplete {{{

" let g:user_emmet_leader_key='<C-Z>'
let g:user_emmet_leader_key=','

" }}}

" Colors {{{

syntax enable
colorscheme escuro

" }}}


" vim syntastic {{{

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint_d'
let g:syntastic_handlebars_checkers=['handlebars']

let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" let g:syntastic_enable_highlighting = 0

" }}}

" Tabs and Spaces {{{

set ts=4						" number of visual spaces per TAB
set sts=4						" number of spaces in tab when editing
set sw=4						" shiftwidth
set ai							" auto indent
set noexpandtab					" tabs are spaces
set backspace=indent,eol,start	" backspace over everything in insert mode
set number 

au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.json set expandtab

" }}}

" set incsearch
" set hlsearch
" set ignorecase
" set modeline

" set foldmethod=indent   "fold based on indent
" set foldnestmax=10      "deepest fold is 10 levels
" set nofoldenable        "dont fold by default
" set foldlevel=1


" Window Tabs {{{

nnoremap t :tabnext<CR>
nnoremap T :tabprev<CR>

" }}}

" Show Invisible Chars {{{

let mapleader="_"
noremap <leader>i :set list!<cr>
set listchars=tab:▸\ ,eol:¬,trail:.,precedes:<,extends:>
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

" }}}

" vimrc Editing {{{

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" }}}

